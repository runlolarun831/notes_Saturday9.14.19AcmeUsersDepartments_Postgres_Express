Video#9- API Routes

Server.js

const express = require('express');
const app = express();
const db = require('./db');

/*this gives us the ability to return a react page as our main page and then end
 up using axios to hit these routes to display data about our products and our
 categories*/
app.get('/api/products', async(req, res, next)=> {
  try {
    res.send(await db.findAllProducts());
  }
  catch(ex){
    next(ex);
  }
});

app.get('/api/categories', async(req, res, next)=> {
  try {
    res.send(await db.findAllCategories());
  }
  catch(ex){
    next(ex);
  }
});

db.sync()
  .then(()=> app.listen(3000));

db.js

const pg = require('pg');//
const { Client } = pg;//bring destructed postgres client

//this is going to connect to our postgres database w/ connection string
const client = new Client('postgres://localhost/the_acme_db');

//need client to connect to the postgres database
client.connect();

// hardcode part of SQL to our db.js file change "foo category" to "the foo category"
const SQL = `
  DROP TABLE IF EXISTS products;
  DROP TABLE IF EXISTS categories;

  CREATE TABLE categories(
    id UUID PRIMARY KEY,
    name VARCHAR(255) UNIQUE NOT NULL
  );

  CREATE TABLE products(
    id UUID PRIMARY KEY,
    name VARCHAR(255) UNIQUE NOT NULL,
    in_stock BOOLEAN DEFAULT true,
    category_id UUID REFERENCES categories(id)
  );
  INSERT INTO categories(id, name) VALUES('a1eb855a-1dd3-4aec-9dd7-aff78be20d0e', 'the foo category');
  INSERT INTO categories(id, name) VALUES('fe5a1929-78f2-4c94-a78c-d548952981ea','bar category');

  INSERT INTO products(id, name, category_id) VALUES('e4d3fdab-00ca-4c1e-abd2-a24cbbe01a66', 'foo1','a1eb855a-1dd3-4aec-9dd7-aff78be20d0e' );
  INSERT INTO products(id, name, category_id) VALUES('985b402f-b6a3-4f0a-8bb9-860662620415','foo2', 'a1eb855a-1dd3-4aec-9dd7-aff78be20d0e');
  INSERT INTO products(id, name, in_stock, category_id) VALUES('ebaae031-4147-4189-b3a8-de344e528231', 'bar1', false, 'fe5a1929-78f2-4c94-a78c-d548952981ea');
  `;

  /*create a method, sync, await client
  we're identifying the database, query the SQL
  --almost the same SQL we did in terminal , now we r doing it in node
  --this creates whatever tables you need to make*/
  const sync = async()=> {
    await client.query(SQL);
    console.log('success');
  };
  //method has a separate route from getAllProducts & tells client to query
  const findAllCategories = async()=> {
    const response = await client.query('SELECT * FROM categories');
    return response.rows;
  };
  //methods has a separate route getAllCategories
  const findAllProducts = async()=> {
    const response = await client.query('SELECT * FROM products');
    return response.rows;
  };

  //going to use these in our server file
  module.exports = {
    sync,
    findAllProducts,
    findAllCategories
  };


